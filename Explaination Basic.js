‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º, ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶á ‡¶≤‡¶æ‡¶á‡¶® ‡¶ì ‡¶ü‡¶™‡¶ø‡¶ï ‡¶ì‡¶Ø‡¶º‡¶æ‡¶á‡¶ú ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶õ‡¶ø‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶π‡¶æ‡¶≤‡¶ï‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º, ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ß‡¶∞‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡•§

1Ô∏è‚É£ EventCard.js
function EventCard({ event, onDelete }) {
  const handleDelete = (e) => {
    e.stopPropagation(); // parent div ‡¶è click ‡¶®‡¶æ ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶á button ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
    onDelete(event.id);  // parent ‡¶•‡ßá‡¶ï‡ßá onDelete function call ‡¶ï‡¶∞‡ßá, event id ‡¶™‡¶æ‡¶†‡¶æ‡¶Ø‡¶º
  };

  return (
    <div style={{ border: "1px solid #ccc", padding: "10px", marginBottom: "10px", cursor: "pointer" }}>
      <h3>{event.title}</h3>      // event ‡¶è‡¶∞ title ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º
      <p>{event.body}</p>         // event ‡¶è‡¶∞ description/body ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º
      <button onClick={handleDelete} style={{ color: "red" }}>Delete</button>
    </div>
  );
}

export default EventCard;


üîπ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:

props ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá parent component ‡¶•‡ßá‡¶ï‡ßá data (event) ‡¶è‡¶¨‡¶Ç function (onDelete) ‡¶Ü‡¶®‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

Delete button click ‡¶ï‡¶∞‡¶≤‡ßá event.id parent function-‡¶è ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡•§

stopPropagation() ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá parent div-‡¶è‡¶∞ click event trigger ‡¶®‡¶æ ‡¶π‡¶Ø‡¶º‡•§

React feature: Component reusability ‚Äì ‡¶è‡¶ï‡¶á Card ‡¶Ö‡¶®‡ßç‡¶Ø data-‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø reuse ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§

2Ô∏è‚É£ EventForm.js
function EventForm({ onCreate }) {
  const [title, setTitle] = useState(""); // input title state
  const [body, setBody] = useState("");   // input description/body state

  const handleSubmit = (e) => {
    e.preventDefault();           // page reload ‡¶Ü‡¶ü‡¶ï‡¶æ‡¶Ø‡¶º
    if (!title || !body) return alert("All fields are required!");
    onCreate({ title, body });    // parent function call ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® event ‡¶™‡¶æ‡¶†‡¶æ‡¶Ø‡¶º
    setTitle("");                 // input reset
    setBody("");
  };

  return (
    <form onSubmit={handleSubmit} style={{ marginBottom: "20px" }}>
      <input type="text" placeholder="Event title" value={title} onChange={(e) => setTitle(e.target.value)} style={{ padding: "8px", marginRight: "10px" }} />
      <input type="text" placeholder="Event description" value={body} onChange={(e) => setBody(e.target.value)} style={{ padding: "8px", marginRight: "10px" }} />
      <button type="submit">Add Event</button>
    </form>
  );
}


üîπ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:

useState ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá form input manage ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

onChange ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá input-‡¶è ‡¶≤‡ßá‡¶ñ‡¶æ update ‡¶π‡¶Ø‡¶º state-‡¶è‡•§

handleSubmit form submit handle ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç parent function ‡¶ï‡ßá data ‡¶™‡¶æ‡¶†‡¶æ‡¶Ø‡¶º‡•§

React feature: Two-way binding ‚Äì input ‡¶è‡¶¨‡¶Ç state sync ‡¶•‡¶æ‡¶ï‡ßá‡•§

3Ô∏è‚É£ EventTest.js
const EventTest = () => {
  const [events, setEvents] = useState([]); // ‡¶∏‡¶¨ event ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  useEffect(() => {
    const getEvents = async () => {
      setLoading(true);
      try {
        const data = await fetchEvents(); // API ‡¶•‡ßá‡¶ï‡ßá data fetch
        setEvents(data);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    getEvents();
  }, []);


useEffect: component mount ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞ fetch call ‡¶ï‡¶∞‡¶¨‡ßá‡•§

loading ‡¶è‡¶¨‡¶Ç error state ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá user feedback ‡¶¶‡ßá‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

  const handleCreate = async () => {
    const newEvent = { title: "New Event", body: "This is a test", userId: 1 };
    try {
      const created = await createEvent(newEvent); // API call
      alert(`Event Created with ID: ${created.id}`);
      setEvents((prev) => [...prev, created]);      // ‡¶®‡¶§‡ßÅ‡¶® event add ‡¶ï‡¶∞‡¶æ
    } catch (err) {
      alert(err.message);
    }
  };


‡¶®‡¶§‡ßÅ‡¶® event create ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º API ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡•§

‡¶™‡ßÅ‡¶∞‡¶®‡ßã events state copy ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® event push ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º ‚Äì immutability maintained‡•§

  const handleDelete = async (id) => {
    try {
      const res = await deleteEvent(id); // API delete call
      if (res.success) {
        alert(`Event deleted! Status: ${res.status}`);
        setEvents((prev) => prev.filter((e) => e.id !== id)); // remove from state
      } else {
        alert(res.message);
      }
    } catch (err) {
      alert(err.message);
    }
  };


Delete ‡¶π‡¶≤‡ßá state update ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡•§

React feature: state-driven UI ‚Äì UI auto update ‡¶π‡¶Ø‡¶º state change ‡¶è‡•§

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;


conditional rendering: loading ‡¶¨‡¶æ error ‡¶π‡¶≤‡ßá UI ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡•§

4Ô∏è‚É£ Navbar.js
const user = JSON.parse(localStorage.getItem("user"));
const handleLogout = () => {
  localStorage.removeItem("user");
  navigate("/login");
};


Local storage ‡¶•‡ßá‡¶ï‡ßá user info ‡¶®‡¶ø‡¶Ø‡¶º‡ßá menu conditionally ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡•§

React Router: navigate ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá page change ‡¶ï‡¶∞‡¶æ‡•§

5Ô∏è‚É£ ProtectedRoute.js
const ProtectedRoute = ({ adminOnly }) => {
  const isLoggedIn = true;
  const isAdmin = true;

  if (!isLoggedIn) return <Navigate to="/login" replace />;
  if (adminOnly && !isAdmin) return <Navigate to="/" replace />;

  return <Outlet />;
};


Route protection ‚Äì ‡¶Ø‡¶¶‡¶ø ‡¶≤‡¶ó‡¶á‡¶® ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, login page redirect‡•§

Admin-only pages control‡•§

React Router feature: <Outlet> ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá nested routes render‡•§

6Ô∏è‚É£ Login.js ‡¶è‡¶¨‡¶Ç Signup.js

Controlled input with useState.

Validation (empty fields, password match, strength).

Conditional feedback (red/green text).

Navigate after success login/signup.

Context API (AuthContext) ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá user state globally manage‡•§

7Ô∏è‚É£ testAPI.js
import { fetchEvents, createEvent, deleteEvent } from "./api/eventService";

const testFetch = async () => {
  try {
    const events = await fetchEvents();
    console.log("Fetched Events:", events);
    console.log("Status: 200 OK");
  } catch (err) {
    console.error("Fetch Error:", err.message);
  }
  ...
};


API ‡¶è‡¶∞ fetch, create, delete test ‡¶ï‡¶∞‡ßá console log‡•§

Async/await ‡¶è‡¶¨‡¶Ç try/catch ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá proper error handling‡•§

React-agnostic, ‡¶∂‡ßÅ‡¶ß‡ßÅ JS async API test‡•§

8Ô∏è‚É£ ‡¶Æ‡ßÇ‡¶≤ React Features ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
Feature	Usage
useState	Form inputs, events, loading/error state
useEffect	API fetch on mount
Conditional Rendering	Loading, Error, Password match
Event Handling	onClick, onSubmit
Props	EventCard, EventForm, ProtectedRoute
Context API	AuthContext for user login state
React Router	Page navigation, ProtectedRoute, Navigate
API calls	fetchEvents, createEvent, deleteEvent
Immutability	setEvents([...prev, newEvent])
Two-way binding	input value ‚Üî state

üí° Summary (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º):

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø Event Management React App, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá:

Event list ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã, create ‡¶ì delete ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡•§

Login/Signup page ‡¶Ü‡¶õ‡ßá, password validation ‡¶Ü‡¶õ‡ßá‡•§

Admin panel ‡¶Ü‡¶õ‡ßá ‡¶Ø‡¶æ ‡¶∂‡ßÅ‡¶ß‡ßÅ admin ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶Ø‡¶º‡•§

Navbar conditionally render ‡¶π‡¶Ø‡¶º user login ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ‡•§

‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá React state, props, Context API, Router, API calls, conditional rendering ‡¶∏‡¶¨ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ feature ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§

‡¶Ø‡¶¶‡¶ø ‡¶ö‡¶æ‡¶ì, ‡¶Ü‡¶Æ‡¶ø ‡¶™‡¶∞‡ßá‡¶∞ ‡¶ß‡¶æ‡¶™‡ßá ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶ú‡ßá‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶™‡ßÅ‡¶∞‡ßã flow ‡¶ö‡¶æ‡¶∞‡ßç‡¶ü ‡¶ì folder structure ‡¶∏‡¶π feature-wise diagram ‡¶¨‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø, ‡¶Ø‡¶æ‡¶§‡ßá ‡¶∏‡¶π‡¶ú‡ßá ‡¶¨‡ßÅ‡¶ù‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º ‡¶ï‡ßã‡¶° ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶è‡¶ï‡ßá ‡¶Ö‡¶™‡¶∞‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá interconnect‡•§

‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá, ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ testAPI.js ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶ï‡ßã‡¶°‡¶ü‡¶ø ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶á ‡¶≤‡¶æ‡¶á‡¶® ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶¨‡ßã, ‡¶∏‡¶æ‡¶•‡ßá React-‡¶è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶¨‡ßá‡¶∏‡¶ø‡¶ï ‡¶ü‡¶™‡¶ø‡¶ï, async/await, ‡¶è‡¶¨‡¶Ç HTTP status code-‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶¨‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ü‡¶æ‡¶ï‡ßá ‡¶ü‡¶™‡¶ø‡¶ï-‡¶ì‡ßü‡¶æ‡¶á‡¶ú ‡¶ì ‡¶≤‡¶æ‡¶á‡¶® ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶∏‡¶π‡¶ú‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßÅ‡¶ù‡¶æ‡¶¨‡ßã‡•§

‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶∂‡ßÅ‡¶∞‡ßÅ
import { fetchEvents, createEvent, deleteEvent } from "./api/eventService";

‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:

React Import: ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ React-‡¶è‡¶∞ ‡¶ï‡ßã‡¶® ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶ø‡¶®‡¶ø ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ JavaScript ‡¶´‡¶æ‡¶á‡¶≤‡•§

API Functions Import: fetchEvents, createEvent, deleteEvent ‡¶π‡¶≤‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ API ‡¶ï‡¶≤‡ßá‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ø‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶´‡¶æ‡¶á‡¶≤ eventService.js-‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶®‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§

React Topic: ‡¶è‡¶á ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ React ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø JS ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§

Fetch Events
const testFetch = async () => {
  try {
    const events = await fetchEvents();
    console.log("Fetched Events:", events);
    console.log("Status: 200 OK");
  } catch (err) {
    console.error("Fetch Error:", err.message);
  }

‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:

async keyword: ‡¶è‡¶á ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶ô‡ßç‡¶ï‡ßç‡¶∞‡ßã‡¶®‡¶æ‡¶∏‡•§ ‡¶Æ‡¶æ‡¶®‡ßá ‡¶è‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßü‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá HTTP request handle ‡¶ï‡¶∞‡¶¨‡ßá‡•§

await keyword: fetchEvents() ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶Ø‡ßá Promise return ‡¶ï‡¶∞‡ßá, ‡¶∏‡ßá‡¶ü‡¶æ resolve ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø await ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø‡•§

Try/Catch Block:

Try: ‡¶Ø‡¶¶‡¶ø request ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü, ‡¶Ü‡¶Æ‡¶∞‡¶æ response data events-‡¶è ‡¶∞‡¶æ‡¶ñ‡¶ø‡•§

Catch: ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã error ‡¶Ü‡¶∏‡ßá (‡¶Ø‡ßá‡¶Æ‡¶® network fail), ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶æ catch block handle ‡¶ï‡¶∞‡¶¨‡ßá‡•§

Status Code: ‡¶è‡¶ñ‡¶æ‡¶®‡ßá 200 OK ‡¶π‡¶≤‡ßã HTTP status code ‡¶Ø‡¶æ ‡¶¨‡ßã‡¶ù‡¶æ‡ßü request ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§

React Context: ‡¶è‡¶á ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ API call React ‡¶è‡¶∞ useEffect hook-‡¶è‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü ‡¶Ø‡¶æ‡¶§‡ßá component mount ‡¶π‡¶ì‡ßü‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶æ‡¶•‡ßá‡¶á ‡¶°‡ßá‡¶ü‡¶æ fetch ‡¶π‡ßü‡•§

Create Event
  const testCreate = async () => {
    const newEvent = {
      title: "Test Event",
      body: "This is a test event",
      userId: 1,
    };

    try {
      const result = await createEvent(newEvent);
      console.log("Event Created:", result);
      console.log("Status: 201 Created / 200 OK");
    } catch (err) {
      console.error("Create Error:", err.message);
    }
  };

‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:

Object Creation: ‡¶Ü‡¶Æ‡¶∞‡¶æ newEvent ‡¶®‡¶æ‡¶Æ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø object ‡¶¨‡¶æ‡¶®‡¶ø‡ßü‡ßá‡¶õ‡¶ø ‡¶Ø‡¶æ API POST request ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá‡•§

await createEvent(newEvent): ‡¶è‡¶ñ‡¶æ‡¶®‡ßá POST request ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç API ‡¶•‡ßá‡¶ï‡ßá response ‡¶Ü‡¶∏‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ function wait ‡¶ï‡¶∞‡¶õ‡ßá‡•§

HTTP Status Codes:

201 Created ‚Üí ‡¶®‡¶§‡ßÅ‡¶® resource ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§

200 OK ‚Üí ‡¶ï‡¶ø‡¶õ‡ßÅ API POST request-‡¶ì 200 return ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§

Try/Catch: ‡¶Ü‡¶¨‡¶æ‡¶∞ error handle ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡¶æ‡¶§‡ßá create operation fail ‡¶π‡¶≤‡ßá error ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡ßü‡•§

React Topic: ‡¶è‡¶á POST request React-‡¶è form submit handler ‡¶¨‡¶æ button click handler-‡¶è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

Delete Event
  const testDelete = async () => {
    try {
      const result = await deleteEvent(1); // ID 1 example
      if (result.success) {
        console.log(`Event Deleted Successfully! Status: ${result.status}`);
      } else {
        console.error(
          `Failed to Delete! Status: ${result.status}, Message: ${result.message}`
        );
      }
    } catch (err) {
      console.error("Delete Error:", err.message);
    }
  };

‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:

Delete Request: ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ID ‡¶∏‡¶π event delete ‡¶ï‡¶∞‡¶õ‡¶ø‡•§

Conditional Check: API response-‡¶è ‡¶Ø‡¶¶‡¶ø success = true ‡¶π‡ßü, ‡¶§‡¶ñ‡¶® successful message ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡ßü‡•§

HTTP Status: Delete request successful ‡¶π‡¶≤‡ßá ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ 200 ‡¶¨‡¶æ 204 status code ‡¶Ü‡¶∏‡ßá‡•§

Catch: Network error ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã issue ‡¶π‡¶≤‡ßá error handle ‡¶π‡¶¨‡ßá‡•§

React Topic: Delete operation ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ list component-‡¶è button click event ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡•§

Run All Tests
  const runTests = async () => {
    await testFetch();
    await testCreate();
    await testDelete();
  };
  runTests();

‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ:

Function Call: ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶¨ test function ‡¶è‡¶ï‡ßá ‡¶è‡¶ï‡ßá call ‡¶ï‡¶∞‡¶õ‡¶ø‡•§

await ensures order execution:

‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá fetch ‡¶π‡¶¨‡ßá ‚Üí ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ create ‚Üí ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ delete‡•§

React Topic: ‡¶è‡¶≠‡¶æ‡¶¨‡ßá async functions chaining ‡¶¨‡¶æ sequential execution ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

React Basic Concepts Used

Import/Export: import { func } from "./file"

Async/Await: API call handle ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§

Try/Catch: Error handling‡•§

HTTP Status Code: Request ‡¶∏‡¶´‡¶≤/‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶§‡¶æ ‡¶¨‡ßã‡¶ù‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§

JS Object: Data send ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§

Function as variable: const testFetch = async () => {}

Button Click / Form: React component-‡¶è create/delete ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡•§

üîπ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ß‡¶æ‡¶™
Function	‡¶ï‡¶æ‡¶ú	HTTP Status
fetchEvents()	Events fetch ‡¶ï‡¶∞‡¶æ	200 OK
createEvent()	‡¶®‡¶§‡ßÅ‡¶® Event ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ	201 Created
deleteEvent()	Event ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ	200 OK / 204 No Content

‡¶Ø‡¶¶‡¶ø ‡¶ö‡¶æ‡¶ì, ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ EventCard.js + EventTest.js ‡¶ì EventForm.js ‡¶è‡¶∞ line-by-line React context ‡¶∏‡¶π ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø, ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶∞‡ßã project structure ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶¨‡ßá‡•§

‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶ü‡¶æ ‡¶ï‡¶∞‡¶ø?

‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡ßá‡¶á diagram ‡¶¨‡¶æ‡¶®‡¶æ‡¶á?
